
display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001950  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08001ad8  08001ad8  00011ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b3c  08001b3c  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08001b3c  08001b3c  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001b3c  08001b3c  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b3c  08001b3c  00011b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001b40  08001b40  00011b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08001b44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
 10 .bss          0000002c  20000024  20000024  00020024  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000050  20000050  00020024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 13 .debug_info   000050c5  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001010  00000000  00000000  00025119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000518  00000000  00000000  00026130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000490  00000000  00000000  00026648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015f28  00000000  00000000  00026ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000415f  00000000  00000000  0003ca00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00076fbb  00000000  00000000  00040b5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000b7b1a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001408  00000000  00000000  000b7b70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001ac0 	.word	0x08001ac0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	08001ac0 	.word	0x08001ac0

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80001d8:	b480      	push	{r7}
 80001da:	b085      	sub	sp, #20
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80001e0:	4b08      	ldr	r3, [pc, #32]	; (8000204 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80001e2:	695a      	ldr	r2, [r3, #20]
 80001e4:	4907      	ldr	r1, [pc, #28]	; (8000204 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	4313      	orrs	r3, r2
 80001ea:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80001ec:	4b05      	ldr	r3, [pc, #20]	; (8000204 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80001ee:	695a      	ldr	r2, [r3, #20]
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	4013      	ands	r3, r2
 80001f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001f6:	68fb      	ldr	r3, [r7, #12]
}
 80001f8:	bf00      	nop
 80001fa:	3714      	adds	r7, #20
 80001fc:	46bd      	mov	sp, r7
 80001fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000202:	4770      	bx	lr
 8000204:	40021000 	.word	0x40021000

08000208 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000208:	b480      	push	{r7}
 800020a:	b083      	sub	sp, #12
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]
 8000210:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	683a      	ldr	r2, [r7, #0]
 8000216:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000218:	bf00      	nop
 800021a:	370c      	adds	r7, #12
 800021c:	46bd      	mov	sp, r7
 800021e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000222:	4770      	bx	lr

08000224 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b086      	sub	sp, #24
 8000228:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800022a:	463b      	mov	r3, r7
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
 8000230:	605a      	str	r2, [r3, #4]
 8000232:	609a      	str	r2, [r3, #8]
 8000234:	60da      	str	r2, [r3, #12]
 8000236:	611a      	str	r2, [r3, #16]
 8000238:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800023a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800023e:	f7ff ffcb 	bl	80001d8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000242:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000246:	f7ff ffc7 	bl	80001d8 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, B_Pin|A_Pin|DIG3_Pin|F_Pin|DIG1_Pin|DIG0_Pin|DIG2_Pin|DIGT_Pin|C_Pin|E_Pin);
 800024a:	f640 11ff 	movw	r1, #2559	; 0x9ff
 800024e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000252:	f7ff ffd9 	bl	8000208 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, DP_Pin|G_Pin|D_Pin);
 8000256:	2132      	movs	r1, #50	; 0x32
 8000258:	4813      	ldr	r0, [pc, #76]	; (80002a8 <MX_GPIO_Init+0x84>)
 800025a:	f7ff ffd5 	bl	8000208 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = B_Pin|A_Pin|DIG3_Pin|F_Pin|DIG1_Pin|DIG0_Pin|DIG2_Pin|DIGT_Pin|C_Pin|E_Pin;
 800025e:	f640 13ff 	movw	r3, #2559	; 0x9ff
 8000262:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000264:	2301      	movs	r3, #1
 8000266:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000268:	2300      	movs	r3, #0
 800026a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800026c:	2300      	movs	r3, #0
 800026e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000270:	2300      	movs	r3, #0
 8000272:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000274:	463b      	mov	r3, r7
 8000276:	4619      	mov	r1, r3
 8000278:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800027c:	f000 ff2c 	bl	80010d8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DP_Pin|G_Pin|D_Pin;
 8000280:	2332      	movs	r3, #50	; 0x32
 8000282:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000284:	2301      	movs	r3, #1
 8000286:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000288:	2300      	movs	r3, #0
 800028a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800028c:	2300      	movs	r3, #0
 800028e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000290:	2300      	movs	r3, #0
 8000292:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000294:	463b      	mov	r3, r7
 8000296:	4619      	mov	r1, r3
 8000298:	4803      	ldr	r0, [pc, #12]	; (80002a8 <MX_GPIO_Init+0x84>)
 800029a:	f000 ff1d 	bl	80010d8 <LL_GPIO_Init>

}
 800029e:	bf00      	nop
 80002a0:	3718      	adds	r7, #24
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	48000400 	.word	0x48000400

080002ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b085      	sub	sp, #20
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	f003 0307 	and.w	r3, r3, #7
 80002ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002bc:	4b0c      	ldr	r3, [pc, #48]	; (80002f0 <__NVIC_SetPriorityGrouping+0x44>)
 80002be:	68db      	ldr	r3, [r3, #12]
 80002c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002c2:	68ba      	ldr	r2, [r7, #8]
 80002c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80002c8:	4013      	ands	r3, r2
 80002ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002d0:	68bb      	ldr	r3, [r7, #8]
 80002d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80002d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002de:	4a04      	ldr	r2, [pc, #16]	; (80002f0 <__NVIC_SetPriorityGrouping+0x44>)
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	60d3      	str	r3, [r2, #12]
}
 80002e4:	bf00      	nop
 80002e6:	3714      	adds	r7, #20
 80002e8:	46bd      	mov	sp, r7
 80002ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ee:	4770      	bx	lr
 80002f0:	e000ed00 	.word	0xe000ed00

080002f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002f8:	4b04      	ldr	r3, [pc, #16]	; (800030c <__NVIC_GetPriorityGrouping+0x18>)
 80002fa:	68db      	ldr	r3, [r3, #12]
 80002fc:	0a1b      	lsrs	r3, r3, #8
 80002fe:	f003 0307 	and.w	r3, r3, #7
}
 8000302:	4618      	mov	r0, r3
 8000304:	46bd      	mov	sp, r7
 8000306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030a:	4770      	bx	lr
 800030c:	e000ed00 	.word	0xe000ed00

08000310 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	4603      	mov	r3, r0
 8000318:	6039      	str	r1, [r7, #0]
 800031a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800031c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000320:	2b00      	cmp	r3, #0
 8000322:	db0a      	blt.n	800033a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000324:	683b      	ldr	r3, [r7, #0]
 8000326:	b2da      	uxtb	r2, r3
 8000328:	490c      	ldr	r1, [pc, #48]	; (800035c <__NVIC_SetPriority+0x4c>)
 800032a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800032e:	0112      	lsls	r2, r2, #4
 8000330:	b2d2      	uxtb	r2, r2
 8000332:	440b      	add	r3, r1
 8000334:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000338:	e00a      	b.n	8000350 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800033a:	683b      	ldr	r3, [r7, #0]
 800033c:	b2da      	uxtb	r2, r3
 800033e:	4908      	ldr	r1, [pc, #32]	; (8000360 <__NVIC_SetPriority+0x50>)
 8000340:	79fb      	ldrb	r3, [r7, #7]
 8000342:	f003 030f 	and.w	r3, r3, #15
 8000346:	3b04      	subs	r3, #4
 8000348:	0112      	lsls	r2, r2, #4
 800034a:	b2d2      	uxtb	r2, r2
 800034c:	440b      	add	r3, r1
 800034e:	761a      	strb	r2, [r3, #24]
}
 8000350:	bf00      	nop
 8000352:	370c      	adds	r7, #12
 8000354:	46bd      	mov	sp, r7
 8000356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035a:	4770      	bx	lr
 800035c:	e000e100 	.word	0xe000e100
 8000360:	e000ed00 	.word	0xe000ed00

08000364 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000364:	b480      	push	{r7}
 8000366:	b089      	sub	sp, #36	; 0x24
 8000368:	af00      	add	r7, sp, #0
 800036a:	60f8      	str	r0, [r7, #12]
 800036c:	60b9      	str	r1, [r7, #8]
 800036e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	f003 0307 	and.w	r3, r3, #7
 8000376:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000378:	69fb      	ldr	r3, [r7, #28]
 800037a:	f1c3 0307 	rsb	r3, r3, #7
 800037e:	2b04      	cmp	r3, #4
 8000380:	bf28      	it	cs
 8000382:	2304      	movcs	r3, #4
 8000384:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000386:	69fb      	ldr	r3, [r7, #28]
 8000388:	3304      	adds	r3, #4
 800038a:	2b06      	cmp	r3, #6
 800038c:	d902      	bls.n	8000394 <NVIC_EncodePriority+0x30>
 800038e:	69fb      	ldr	r3, [r7, #28]
 8000390:	3b03      	subs	r3, #3
 8000392:	e000      	b.n	8000396 <NVIC_EncodePriority+0x32>
 8000394:	2300      	movs	r3, #0
 8000396:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000398:	f04f 32ff 	mov.w	r2, #4294967295
 800039c:	69bb      	ldr	r3, [r7, #24]
 800039e:	fa02 f303 	lsl.w	r3, r2, r3
 80003a2:	43da      	mvns	r2, r3
 80003a4:	68bb      	ldr	r3, [r7, #8]
 80003a6:	401a      	ands	r2, r3
 80003a8:	697b      	ldr	r3, [r7, #20]
 80003aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003ac:	f04f 31ff 	mov.w	r1, #4294967295
 80003b0:	697b      	ldr	r3, [r7, #20]
 80003b2:	fa01 f303 	lsl.w	r3, r1, r3
 80003b6:	43d9      	mvns	r1, r3
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003bc:	4313      	orrs	r3, r2
         );
}
 80003be:	4618      	mov	r0, r3
 80003c0:	3724      	adds	r7, #36	; 0x24
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr
	...

080003cc <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80003d0:	4b05      	ldr	r3, [pc, #20]	; (80003e8 <LL_RCC_HSI_Enable+0x1c>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4a04      	ldr	r2, [pc, #16]	; (80003e8 <LL_RCC_HSI_Enable+0x1c>)
 80003d6:	f043 0301 	orr.w	r3, r3, #1
 80003da:	6013      	str	r3, [r2, #0]
}
 80003dc:	bf00      	nop
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	40021000 	.word	0x40021000

080003ec <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80003f0:	4b06      	ldr	r3, [pc, #24]	; (800040c <LL_RCC_HSI_IsReady+0x20>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	f003 0302 	and.w	r3, r3, #2
 80003f8:	2b02      	cmp	r3, #2
 80003fa:	bf0c      	ite	eq
 80003fc:	2301      	moveq	r3, #1
 80003fe:	2300      	movne	r3, #0
 8000400:	b2db      	uxtb	r3, r3
}
 8000402:	4618      	mov	r0, r3
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr
 800040c:	40021000 	.word	0x40021000

08000410 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000418:	4b07      	ldr	r3, [pc, #28]	; (8000438 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	00db      	lsls	r3, r3, #3
 8000424:	4904      	ldr	r1, [pc, #16]	; (8000438 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000426:	4313      	orrs	r3, r2
 8000428:	600b      	str	r3, [r1, #0]
}
 800042a:	bf00      	nop
 800042c:	370c      	adds	r7, #12
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	40021000 	.word	0x40021000

0800043c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000444:	4b06      	ldr	r3, [pc, #24]	; (8000460 <LL_RCC_SetSysClkSource+0x24>)
 8000446:	685b      	ldr	r3, [r3, #4]
 8000448:	f023 0203 	bic.w	r2, r3, #3
 800044c:	4904      	ldr	r1, [pc, #16]	; (8000460 <LL_RCC_SetSysClkSource+0x24>)
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	4313      	orrs	r3, r2
 8000452:	604b      	str	r3, [r1, #4]
}
 8000454:	bf00      	nop
 8000456:	370c      	adds	r7, #12
 8000458:	46bd      	mov	sp, r7
 800045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045e:	4770      	bx	lr
 8000460:	40021000 	.word	0x40021000

08000464 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000468:	4b04      	ldr	r3, [pc, #16]	; (800047c <LL_RCC_GetSysClkSource+0x18>)
 800046a:	685b      	ldr	r3, [r3, #4]
 800046c:	f003 030c 	and.w	r3, r3, #12
}
 8000470:	4618      	mov	r0, r3
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop
 800047c:	40021000 	.word	0x40021000

08000480 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000488:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <LL_RCC_SetAHBPrescaler+0x24>)
 800048a:	685b      	ldr	r3, [r3, #4]
 800048c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000490:	4904      	ldr	r1, [pc, #16]	; (80004a4 <LL_RCC_SetAHBPrescaler+0x24>)
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	4313      	orrs	r3, r2
 8000496:	604b      	str	r3, [r1, #4]
}
 8000498:	bf00      	nop
 800049a:	370c      	adds	r7, #12
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr
 80004a4:	40021000 	.word	0x40021000

080004a8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b083      	sub	sp, #12
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80004b0:	4b06      	ldr	r3, [pc, #24]	; (80004cc <LL_RCC_SetAPB1Prescaler+0x24>)
 80004b2:	685b      	ldr	r3, [r3, #4]
 80004b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80004b8:	4904      	ldr	r1, [pc, #16]	; (80004cc <LL_RCC_SetAPB1Prescaler+0x24>)
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	4313      	orrs	r3, r2
 80004be:	604b      	str	r3, [r1, #4]
}
 80004c0:	bf00      	nop
 80004c2:	370c      	adds	r7, #12
 80004c4:	46bd      	mov	sp, r7
 80004c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ca:	4770      	bx	lr
 80004cc:	40021000 	.word	0x40021000

080004d0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80004d8:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80004da:	685b      	ldr	r3, [r3, #4]
 80004dc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80004e0:	4904      	ldr	r1, [pc, #16]	; (80004f4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	4313      	orrs	r3, r2
 80004e6:	604b      	str	r3, [r1, #4]
}
 80004e8:	bf00      	nop
 80004ea:	370c      	adds	r7, #12
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr
 80004f4:	40021000 	.word	0x40021000

080004f8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b085      	sub	sp, #20
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000500:	4b08      	ldr	r3, [pc, #32]	; (8000524 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000502:	69da      	ldr	r2, [r3, #28]
 8000504:	4907      	ldr	r1, [pc, #28]	; (8000524 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	4313      	orrs	r3, r2
 800050a:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800050c:	4b05      	ldr	r3, [pc, #20]	; (8000524 <LL_APB1_GRP1_EnableClock+0x2c>)
 800050e:	69da      	ldr	r2, [r3, #28]
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	4013      	ands	r3, r2
 8000514:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000516:	68fb      	ldr	r3, [r7, #12]
}
 8000518:	bf00      	nop
 800051a:	3714      	adds	r7, #20
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr
 8000524:	40021000 	.word	0x40021000

08000528 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000530:	4b08      	ldr	r3, [pc, #32]	; (8000554 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000532:	699a      	ldr	r2, [r3, #24]
 8000534:	4907      	ldr	r1, [pc, #28]	; (8000554 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	4313      	orrs	r3, r2
 800053a:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800053c:	4b05      	ldr	r3, [pc, #20]	; (8000554 <LL_APB2_GRP1_EnableClock+0x2c>)
 800053e:	699a      	ldr	r2, [r3, #24]
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	4013      	ands	r3, r2
 8000544:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000546:	68fb      	ldr	r3, [r7, #12]
}
 8000548:	bf00      	nop
 800054a:	3714      	adds	r7, #20
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr
 8000554:	40021000 	.word	0x40021000

08000558 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <LL_FLASH_SetLatency+0x24>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f023 0207 	bic.w	r2, r3, #7
 8000568:	4904      	ldr	r1, [pc, #16]	; (800057c <LL_FLASH_SetLatency+0x24>)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4313      	orrs	r3, r2
 800056e:	600b      	str	r3, [r1, #0]
}
 8000570:	bf00      	nop
 8000572:	370c      	adds	r7, #12
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr
 800057c:	40022000 	.word	0x40022000

08000580 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000584:	4b04      	ldr	r3, [pc, #16]	; (8000598 <LL_FLASH_GetLatency+0x18>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f003 0307 	and.w	r3, r3, #7
}
 800058c:	4618      	mov	r0, r3
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	40022000 	.word	0x40022000

0800059c <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f043 0201 	orr.w	r2, r3, #1
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	601a      	str	r2, [r3, #0]
}
 80005b0:	bf00      	nop
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr

080005bc <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	f06f 0201 	mvn.w	r2, #1
 80005ca:	611a      	str	r2, [r3, #16]
}
 80005cc:	bf00      	nop
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr

080005d8 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	691b      	ldr	r3, [r3, #16]
 80005e4:	f003 0301 	and.w	r3, r3, #1
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d101      	bne.n	80005f0 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 80005ec:	2301      	movs	r3, #1
 80005ee:	e000      	b.n	80005f2 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 80005f0:	2300      	movs	r3, #0
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr

080005fe <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 80005fe:	b480      	push	{r7}
 8000600:	b083      	sub	sp, #12
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	68db      	ldr	r3, [r3, #12]
 800060a:	f043 0201 	orr.w	r2, r3, #1
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	60da      	str	r2, [r3, #12]
}
 8000612:	bf00      	nop
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr

0800061e <LL_GPIO_SetOutputPin>:
{
 800061e:	b480      	push	{r7}
 8000620:	b083      	sub	sp, #12
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
 8000626:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	683a      	ldr	r2, [r7, #0]
 800062c:	619a      	str	r2, [r3, #24]
}
 800062e:	bf00      	nop
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr

0800063a <LL_GPIO_ResetOutputPin>:
{
 800063a:	b480      	push	{r7}
 800063c:	b083      	sub	sp, #12
 800063e:	af00      	add	r7, sp, #0
 8000640:	6078      	str	r0, [r7, #4]
 8000642:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	683a      	ldr	r2, [r7, #0]
 8000648:	629a      	str	r2, [r3, #40]	; 0x28
}
 800064a:	bf00      	nop
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
	...

08000658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800065c:	2001      	movs	r0, #1
 800065e:	f7ff ff63 	bl	8000528 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000662:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000666:	f7ff ff47 	bl	80004f8 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800066a:	2003      	movs	r0, #3
 800066c:	f7ff fe1e 	bl	80002ac <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8000670:	f7ff fe40 	bl	80002f4 <__NVIC_GetPriorityGrouping>
 8000674:	4603      	mov	r3, r0
 8000676:	2200      	movs	r2, #0
 8000678:	210f      	movs	r1, #15
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff fe72 	bl	8000364 <NVIC_EncodePriority>
 8000680:	4603      	mov	r3, r0
 8000682:	4619      	mov	r1, r3
 8000684:	f04f 30ff 	mov.w	r0, #4294967295
 8000688:	f7ff fe42 	bl	8000310 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068c:	f000 f85c 	bl	8000748 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000690:	f7ff fdc8 	bl	8000224 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000694:	f000 fb70 	bl	8000d78 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_EnableCounter(TIM2);
 8000698:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800069c:	f7ff ff7e 	bl	800059c <LL_TIM_EnableCounter>
  LL_TIM_EnableIT_UPDATE(TIM2);
 80006a0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80006a4:	f7ff ffab 	bl	80005fe <LL_TIM_EnableIT_UPDATE>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
	  if(smer){
 80006a8:	4b24      	ldr	r3, [pc, #144]	; (800073c <main+0xe4>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d01d      	beq.n	80006ec <main+0x94>
		  	  for (index_2 = strlen(meno) - 4; index_2 >= 0; index_2--){
 80006b0:	4823      	ldr	r0, [pc, #140]	; (8000740 <main+0xe8>)
 80006b2:	f7ff fd89 	bl	80001c8 <strlen>
 80006b6:	4603      	mov	r3, r0
 80006b8:	3b04      	subs	r3, #4
 80006ba:	461a      	mov	r2, r3
 80006bc:	4b21      	ldr	r3, [pc, #132]	; (8000744 <main+0xec>)
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	e010      	b.n	80006e4 <main+0x8c>
		  			LL_mDelay(500);
 80006c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006c6:	f001 f999 	bl	80019fc <LL_mDelay>
		  			if(index_2==0){
 80006ca:	4b1e      	ldr	r3, [pc, #120]	; (8000744 <main+0xec>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d103      	bne.n	80006da <main+0x82>
						 smer = 0;
 80006d2:	4b1a      	ldr	r3, [pc, #104]	; (800073c <main+0xe4>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
						 break;
 80006d8:	e008      	b.n	80006ec <main+0x94>
		  	  for (index_2 = strlen(meno) - 4; index_2 >= 0; index_2--){
 80006da:	4b1a      	ldr	r3, [pc, #104]	; (8000744 <main+0xec>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	3b01      	subs	r3, #1
 80006e0:	4a18      	ldr	r2, [pc, #96]	; (8000744 <main+0xec>)
 80006e2:	6013      	str	r3, [r2, #0]
 80006e4:	4b17      	ldr	r3, [pc, #92]	; (8000744 <main+0xec>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	daea      	bge.n	80006c2 <main+0x6a>
		  			}
		  	   }
	  	  }
	  if(!smer){
 80006ec:	4b13      	ldr	r3, [pc, #76]	; (800073c <main+0xe4>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d1d9      	bne.n	80006a8 <main+0x50>
		  for (index_2 = 0; index_2 <= strlen(meno) - 4; index_2++){
 80006f4:	4b13      	ldr	r3, [pc, #76]	; (8000744 <main+0xec>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	e015      	b.n	8000728 <main+0xd0>
		  			  LL_mDelay(500);
 80006fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000700:	f001 f97c 	bl	80019fc <LL_mDelay>
		  			  if( index_2 == (strlen(meno)-4)){
 8000704:	480e      	ldr	r0, [pc, #56]	; (8000740 <main+0xe8>)
 8000706:	f7ff fd5f 	bl	80001c8 <strlen>
 800070a:	4603      	mov	r3, r0
 800070c:	3b04      	subs	r3, #4
 800070e:	4a0d      	ldr	r2, [pc, #52]	; (8000744 <main+0xec>)
 8000710:	6812      	ldr	r2, [r2, #0]
 8000712:	4293      	cmp	r3, r2
 8000714:	d103      	bne.n	800071e <main+0xc6>
		  				  smer = 1;
 8000716:	4b09      	ldr	r3, [pc, #36]	; (800073c <main+0xe4>)
 8000718:	2201      	movs	r2, #1
 800071a:	601a      	str	r2, [r3, #0]
		  				  break;
 800071c:	e00d      	b.n	800073a <main+0xe2>
		  for (index_2 = 0; index_2 <= strlen(meno) - 4; index_2++){
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <main+0xec>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	3301      	adds	r3, #1
 8000724:	4a07      	ldr	r2, [pc, #28]	; (8000744 <main+0xec>)
 8000726:	6013      	str	r3, [r2, #0]
 8000728:	4805      	ldr	r0, [pc, #20]	; (8000740 <main+0xe8>)
 800072a:	f7ff fd4d 	bl	80001c8 <strlen>
 800072e:	4603      	mov	r3, r0
 8000730:	3b04      	subs	r3, #4
 8000732:	4a04      	ldr	r2, [pc, #16]	; (8000744 <main+0xec>)
 8000734:	6812      	ldr	r2, [r2, #0]
 8000736:	4293      	cmp	r3, r2
 8000738:	d2e0      	bcs.n	80006fc <main+0xa4>
	  if(smer){
 800073a:	e7b5      	b.n	80006a8 <main+0x50>
 800073c:	2000004c 	.word	0x2000004c
 8000740:	20000000 	.word	0x20000000
 8000744:	20000044 	.word	0x20000044

08000748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 800074c:	2000      	movs	r0, #0
 800074e:	f7ff ff03 	bl	8000558 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8000752:	bf00      	nop
 8000754:	f7ff ff14 	bl	8000580 <LL_FLASH_GetLatency>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d1fa      	bne.n	8000754 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 800075e:	f7ff fe35 	bl	80003cc <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000762:	bf00      	nop
 8000764:	f7ff fe42 	bl	80003ec <LL_RCC_HSI_IsReady>
 8000768:	4603      	mov	r3, r0
 800076a:	2b01      	cmp	r3, #1
 800076c:	d1fa      	bne.n	8000764 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 800076e:	2010      	movs	r0, #16
 8000770:	f7ff fe4e 	bl	8000410 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000774:	2000      	movs	r0, #0
 8000776:	f7ff fe83 	bl	8000480 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800077a:	2000      	movs	r0, #0
 800077c:	f7ff fe94 	bl	80004a8 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000780:	2000      	movs	r0, #0
 8000782:	f7ff fea5 	bl	80004d0 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8000786:	2000      	movs	r0, #0
 8000788:	f7ff fe58 	bl	800043c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 800078c:	bf00      	nop
 800078e:	f7ff fe69 	bl	8000464 <LL_RCC_GetSysClkSource>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d1fa      	bne.n	800078e <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 8000798:	4803      	ldr	r0, [pc, #12]	; (80007a8 <SystemClock_Config+0x60>)
 800079a:	f001 f921 	bl	80019e0 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 800079e:	4802      	ldr	r0, [pc, #8]	; (80007a8 <SystemClock_Config+0x60>)
 80007a0:	f001 f952 	bl	8001a48 <LL_SetSystemCoreClock>
}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	007a1200 	.word	0x007a1200

080007ac <decode_7seg>:

/* USER CODE BEGIN 4 */
unsigned char decode_7seg(unsigned char chr){
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	71fb      	strb	r3, [r7, #7]

	if (chr > (unsigned char)'z')
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	2b7a      	cmp	r3, #122	; 0x7a
 80007ba:	d901      	bls.n	80007c0 <decode_7seg+0x14>
        return 0x00;
 80007bc:	2300      	movs	r3, #0
 80007be:	e003      	b.n	80007c8 <decode_7seg+0x1c>
    return seven_seg_digits_decode_abcdefg[chr - '0'];
 80007c0:	79fb      	ldrb	r3, [r7, #7]
 80007c2:	3b30      	subs	r3, #48	; 0x30
 80007c4:	4a03      	ldr	r2, [pc, #12]	; (80007d4 <decode_7seg+0x28>)
 80007c6:	5cd3      	ldrb	r3, [r2, r3]
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	370c      	adds	r7, #12
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr
 80007d4:	08001ad8 	.word	0x08001ad8

080007d8 <displayData>:

/**
 * displayData() -> Conversion of char to hex.
 */
void displayData(char chr)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]

	uint8_t transfer,help_var;
	transfer = decode_7seg(chr);
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff ffe1 	bl	80007ac <decode_7seg>
 80007ea:	4603      	mov	r3, r0
 80007ec:	73fb      	strb	r3, [r7, #15]
	help_var = transfer & 1;
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	f003 0301 	and.w	r3, r3, #1
 80007f4:	73bb      	strb	r3, [r7, #14]
	if(help_var)
 80007f6:	7bbb      	ldrb	r3, [r7, #14]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d003      	beq.n	8000804 <displayData+0x2c>
			LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80007fc:	2110      	movs	r1, #16
 80007fe:	4831      	ldr	r0, [pc, #196]	; (80008c4 <displayData+0xec>)
 8000800:	f7ff ff1b 	bl	800063a <LL_GPIO_ResetOutputPin>
	transfer = transfer >> 1;
 8000804:	7bfb      	ldrb	r3, [r7, #15]
 8000806:	085b      	lsrs	r3, r3, #1
 8000808:	73fb      	strb	r3, [r7, #15]
	help_var = transfer & 1;
 800080a:	7bfb      	ldrb	r3, [r7, #15]
 800080c:	f003 0301 	and.w	r3, r3, #1
 8000810:	73bb      	strb	r3, [r7, #14]
	if(help_var)
 8000812:	7bbb      	ldrb	r3, [r7, #14]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d004      	beq.n	8000822 <displayData+0x4a>
			LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8000818:	2108      	movs	r1, #8
 800081a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800081e:	f7ff ff0c 	bl	800063a <LL_GPIO_ResetOutputPin>
	transfer = transfer >> 1;
 8000822:	7bfb      	ldrb	r3, [r7, #15]
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	73fb      	strb	r3, [r7, #15]
	help_var = transfer & 1;
 8000828:	7bfb      	ldrb	r3, [r7, #15]
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	73bb      	strb	r3, [r7, #14]
	if(help_var)
 8000830:	7bbb      	ldrb	r3, [r7, #14]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d005      	beq.n	8000842 <displayData+0x6a>
			LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8000836:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800083a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800083e:	f7ff fefc 	bl	800063a <LL_GPIO_ResetOutputPin>
	transfer = transfer >> 1;
 8000842:	7bfb      	ldrb	r3, [r7, #15]
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	73fb      	strb	r3, [r7, #15]
	help_var = transfer & 1;
 8000848:	7bfb      	ldrb	r3, [r7, #15]
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	73bb      	strb	r3, [r7, #14]
	if(help_var)
 8000850:	7bbb      	ldrb	r3, [r7, #14]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d003      	beq.n	800085e <displayData+0x86>
			LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8000856:	2120      	movs	r1, #32
 8000858:	481a      	ldr	r0, [pc, #104]	; (80008c4 <displayData+0xec>)
 800085a:	f7ff feee 	bl	800063a <LL_GPIO_ResetOutputPin>
	transfer = transfer >> 1;
 800085e:	7bfb      	ldrb	r3, [r7, #15]
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	73fb      	strb	r3, [r7, #15]
	help_var = transfer & 1;
 8000864:	7bfb      	ldrb	r3, [r7, #15]
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	73bb      	strb	r3, [r7, #14]
	if(help_var)
 800086c:	7bbb      	ldrb	r3, [r7, #14]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d005      	beq.n	800087e <displayData+0xa6>
			LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8000872:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000876:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800087a:	f7ff fede 	bl	800063a <LL_GPIO_ResetOutputPin>
	transfer = transfer >> 1;
 800087e:	7bfb      	ldrb	r3, [r7, #15]
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	73fb      	strb	r3, [r7, #15]
	help_var = transfer & 1;
 8000884:	7bfb      	ldrb	r3, [r7, #15]
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	73bb      	strb	r3, [r7, #14]
	if(help_var)
 800088c:	7bbb      	ldrb	r3, [r7, #14]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d004      	beq.n	800089c <displayData+0xc4>
			LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8000892:	2101      	movs	r1, #1
 8000894:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000898:	f7ff fecf 	bl	800063a <LL_GPIO_ResetOutputPin>
	transfer = transfer >> 1;
 800089c:	7bfb      	ldrb	r3, [r7, #15]
 800089e:	085b      	lsrs	r3, r3, #1
 80008a0:	73fb      	strb	r3, [r7, #15]
	help_var = transfer & 1;
 80008a2:	7bfb      	ldrb	r3, [r7, #15]
 80008a4:	f003 0301 	and.w	r3, r3, #1
 80008a8:	73bb      	strb	r3, [r7, #14]
	if(help_var)
 80008aa:	7bbb      	ldrb	r3, [r7, #14]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d004      	beq.n	80008ba <displayData+0xe2>
			LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80008b0:	2102      	movs	r1, #2
 80008b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b6:	f7ff fec0 	bl	800063a <LL_GPIO_ResetOutputPin>

}
 80008ba:	bf00      	nop
 80008bc:	3710      	adds	r7, #16
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	48000400 	.word	0x48000400

080008c8 <updateDisplay>:
/**
 * Display data in dDisplayData.
 * Sets every digit to display its value and decimal point.
 */
void updateDisplay(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
	resetDigits();
 80008cc:	f000 f876 	bl	80009bc <resetDigits>
	resetSegments();
 80008d0:	f000 f846 	bl	8000960 <resetSegments>
	setDigit(num);
 80008d4:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <updateDisplay+0x30>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	4618      	mov	r0, r3
 80008dc:	f000 f814 	bl	8000908 <setDigit>
	displayData(meno[index_1+index_2]);
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <updateDisplay+0x34>)
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <updateDisplay+0x38>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4413      	add	r3, r2
 80008ea:	4a06      	ldr	r2, [pc, #24]	; (8000904 <updateDisplay+0x3c>)
 80008ec:	5cd3      	ldrb	r3, [r2, r3]
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff ff72 	bl	80007d8 <displayData>
}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20000048 	.word	0x20000048
 80008fc:	20000040 	.word	0x20000040
 8000900:	20000044 	.word	0x20000044
 8000904:	20000000 	.word	0x20000000

08000908 <setDigit>:


void setDigit(uint8_t pos)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	71fb      	strb	r3, [r7, #7]
	if(pos == 0){
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d105      	bne.n	8000924 <setDigit+0x1c>
		DIGIT_1_ON;
 8000918:	2120      	movs	r1, #32
 800091a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800091e:	f7ff fe7e 	bl	800061e <LL_GPIO_SetOutputPin>
		DIGIT_3_ON;
	}
	else if(pos == 3){
		DIGIT_4_ON;
	}
}
 8000922:	e019      	b.n	8000958 <setDigit+0x50>
	else if(pos == 1){
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	2b01      	cmp	r3, #1
 8000928:	d105      	bne.n	8000936 <setDigit+0x2e>
		DIGIT_2_ON;
 800092a:	2110      	movs	r1, #16
 800092c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000930:	f7ff fe75 	bl	800061e <LL_GPIO_SetOutputPin>
}
 8000934:	e010      	b.n	8000958 <setDigit+0x50>
	else if(pos == 2){
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	2b02      	cmp	r3, #2
 800093a:	d105      	bne.n	8000948 <setDigit+0x40>
		DIGIT_3_ON;
 800093c:	2140      	movs	r1, #64	; 0x40
 800093e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000942:	f7ff fe6c 	bl	800061e <LL_GPIO_SetOutputPin>
}
 8000946:	e007      	b.n	8000958 <setDigit+0x50>
	else if(pos == 3){
 8000948:	79fb      	ldrb	r3, [r7, #7]
 800094a:	2b03      	cmp	r3, #3
 800094c:	d104      	bne.n	8000958 <setDigit+0x50>
		DIGIT_4_ON;
 800094e:	2104      	movs	r1, #4
 8000950:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000954:	f7ff fe63 	bl	800061e <LL_GPIO_SetOutputPin>
}
 8000958:	bf00      	nop
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}

08000960 <resetSegments>:



/*Reset (turn-off) all the segments of display*/
void resetSegments(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8000964:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000968:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800096c:	f7ff fe57 	bl	800061e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8000970:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000974:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000978:	f7ff fe51 	bl	800061e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_1);
 800097c:	2102      	movs	r1, #2
 800097e:	480e      	ldr	r0, [pc, #56]	; (80009b8 <resetSegments+0x58>)
 8000980:	f7ff fe4d 	bl	800061e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8000984:	2120      	movs	r1, #32
 8000986:	480c      	ldr	r0, [pc, #48]	; (80009b8 <resetSegments+0x58>)
 8000988:	f7ff fe49 	bl	800061e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);
 800098c:	2110      	movs	r1, #16
 800098e:	480a      	ldr	r0, [pc, #40]	; (80009b8 <resetSegments+0x58>)
 8000990:	f7ff fe45 	bl	800061e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8000994:	2101      	movs	r1, #1
 8000996:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800099a:	f7ff fe40 	bl	800061e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_1);
 800099e:	2102      	movs	r1, #2
 80009a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a4:	f7ff fe3b 	bl	800061e <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_3);
 80009a8:	2108      	movs	r1, #8
 80009aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ae:	f7ff fe36 	bl	800061e <LL_GPIO_SetOutputPin>
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	48000400 	.word	0x48000400

080009bc <resetDigits>:


/* Reset (turn-off) all digits*/
void resetDigits(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_2);
 80009c0:	2104      	movs	r1, #4
 80009c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c6:	f7ff fe38 	bl	800063a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);
 80009ca:	2120      	movs	r1, #32
 80009cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d0:	f7ff fe33 	bl	800063a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 80009d4:	2110      	movs	r1, #16
 80009d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009da:	f7ff fe2e 	bl	800063a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_6);
 80009de:	2140      	movs	r1, #64	; 0x40
 80009e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e4:	f7ff fe29 	bl	800063a <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7);
 80009e8:	2180      	movs	r1, #128	; 0x80
 80009ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ee:	f7ff fe24 	bl	800063a <LL_GPIO_ResetOutputPin>
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
	...

080009f8 <TIM2_IRQHandler>:

//Update displayed data and keep display ON
void TIM2_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
	if(LL_TIM_IsActiveFlag_UPDATE(TIM2))
 80009fc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000a00:	f7ff fdea 	bl	80005d8 <LL_TIM_IsActiveFlag_UPDATE>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d019      	beq.n	8000a3e <TIM2_IRQHandler+0x46>
	{
		if(num > 3)
 8000a0a:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <TIM2_IRQHandler+0x54>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	2b03      	cmp	r3, #3
 8000a10:	dd02      	ble.n	8000a18 <TIM2_IRQHandler+0x20>
				num = 0;
 8000a12:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <TIM2_IRQHandler+0x54>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
		if(index_1 > 3)
 8000a18:	4b0d      	ldr	r3, [pc, #52]	; (8000a50 <TIM2_IRQHandler+0x58>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2b03      	cmp	r3, #3
 8000a1e:	dd02      	ble.n	8000a26 <TIM2_IRQHandler+0x2e>
				index_1 = 0;
 8000a20:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <TIM2_IRQHandler+0x58>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
		updateDisplay();
 8000a26:	f7ff ff4f 	bl	80008c8 <updateDisplay>
		num++;
 8000a2a:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <TIM2_IRQHandler+0x54>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	4a06      	ldr	r2, [pc, #24]	; (8000a4c <TIM2_IRQHandler+0x54>)
 8000a32:	6013      	str	r3, [r2, #0]
		index_1++;
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <TIM2_IRQHandler+0x58>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	4a05      	ldr	r2, [pc, #20]	; (8000a50 <TIM2_IRQHandler+0x58>)
 8000a3c:	6013      	str	r3, [r2, #0]
	}

	LL_TIM_ClearFlag_UPDATE(TIM2);
 8000a3e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000a42:	f7ff fdbb 	bl	80005bc <LL_TIM_ClearFlag_UPDATE>
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000048 	.word	0x20000048
 8000a50:	20000040 	.word	0x20000040

08000a54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <NMI_Handler+0x4>

08000a5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a5e:	e7fe      	b.n	8000a5e <HardFault_Handler+0x4>

08000a60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <MemManage_Handler+0x4>

08000a66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a6a:	e7fe      	b.n	8000a6a <BusFault_Handler+0x4>

08000a6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <UsageFault_Handler+0x4>

08000a72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
	...

08000aac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <SystemInit+0x20>)
 8000ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ab6:	4a05      	ldr	r2, [pc, #20]	; (8000acc <SystemInit+0x20>)
 8000ab8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000abc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <__NVIC_GetPriorityGrouping>:
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad4:	4b04      	ldr	r3, [pc, #16]	; (8000ae8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	0a1b      	lsrs	r3, r3, #8
 8000ada:	f003 0307 	and.w	r3, r3, #7
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <__NVIC_EnableIRQ>:
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	db0b      	blt.n	8000b16 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	f003 021f 	and.w	r2, r3, #31
 8000b04:	4907      	ldr	r1, [pc, #28]	; (8000b24 <__NVIC_EnableIRQ+0x38>)
 8000b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0a:	095b      	lsrs	r3, r3, #5
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	e000e100 	.word	0xe000e100

08000b28 <__NVIC_SetPriority>:
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	6039      	str	r1, [r7, #0]
 8000b32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	db0a      	blt.n	8000b52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	b2da      	uxtb	r2, r3
 8000b40:	490c      	ldr	r1, [pc, #48]	; (8000b74 <__NVIC_SetPriority+0x4c>)
 8000b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b46:	0112      	lsls	r2, r2, #4
 8000b48:	b2d2      	uxtb	r2, r2
 8000b4a:	440b      	add	r3, r1
 8000b4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000b50:	e00a      	b.n	8000b68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	b2da      	uxtb	r2, r3
 8000b56:	4908      	ldr	r1, [pc, #32]	; (8000b78 <__NVIC_SetPriority+0x50>)
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	f003 030f 	and.w	r3, r3, #15
 8000b5e:	3b04      	subs	r3, #4
 8000b60:	0112      	lsls	r2, r2, #4
 8000b62:	b2d2      	uxtb	r2, r2
 8000b64:	440b      	add	r3, r1
 8000b66:	761a      	strb	r2, [r3, #24]
}
 8000b68:	bf00      	nop
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	e000e100 	.word	0xe000e100
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <NVIC_EncodePriority>:
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b089      	sub	sp, #36	; 0x24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	f003 0307 	and.w	r3, r3, #7
 8000b8e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b90:	69fb      	ldr	r3, [r7, #28]
 8000b92:	f1c3 0307 	rsb	r3, r3, #7
 8000b96:	2b04      	cmp	r3, #4
 8000b98:	bf28      	it	cs
 8000b9a:	2304      	movcs	r3, #4
 8000b9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	3304      	adds	r3, #4
 8000ba2:	2b06      	cmp	r3, #6
 8000ba4:	d902      	bls.n	8000bac <NVIC_EncodePriority+0x30>
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	3b03      	subs	r3, #3
 8000baa:	e000      	b.n	8000bae <NVIC_EncodePriority+0x32>
 8000bac:	2300      	movs	r3, #0
 8000bae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bba:	43da      	mvns	r2, r3
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	fa01 f303 	lsl.w	r3, r1, r3
 8000bce:	43d9      	mvns	r1, r3
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd4:	4313      	orrs	r3, r2
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3724      	adds	r7, #36	; 0x24
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
	...

08000be4 <LL_AHB1_GRP1_EnableClock>:
{
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000bec:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000bee:	695a      	ldr	r2, [r3, #20]
 8000bf0:	4907      	ldr	r1, [pc, #28]	; (8000c10 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000bf8:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000bfa:	695a      	ldr	r2, [r3, #20]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4013      	ands	r3, r2
 8000c00:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c02:	68fb      	ldr	r3, [r7, #12]
}
 8000c04:	bf00      	nop
 8000c06:	3714      	adds	r7, #20
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	40021000 	.word	0x40021000

08000c14 <LL_APB1_GRP1_EnableClock>:
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000c1c:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000c1e:	69da      	ldr	r2, [r3, #28]
 8000c20:	4907      	ldr	r1, [pc, #28]	; (8000c40 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000c28:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000c2a:	69da      	ldr	r2, [r3, #28]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4013      	ands	r3, r2
 8000c30:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c32:	68fb      	ldr	r3, [r7, #12]
}
 8000c34:	bf00      	nop
 8000c36:	3714      	adds	r7, #20
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	40021000 	.word	0x40021000

08000c44 <LL_TIM_DisableARRPreload>:
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	601a      	str	r2, [r3, #0]
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <LL_TIM_OC_DisableFast>:
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d028      	beq.n	8000cc6 <LL_TIM_OC_DisableFast+0x62>
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	2b04      	cmp	r3, #4
 8000c78:	d023      	beq.n	8000cc2 <LL_TIM_OC_DisableFast+0x5e>
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	2b10      	cmp	r3, #16
 8000c7e:	d01e      	beq.n	8000cbe <LL_TIM_OC_DisableFast+0x5a>
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	2b40      	cmp	r3, #64	; 0x40
 8000c84:	d019      	beq.n	8000cba <LL_TIM_OC_DisableFast+0x56>
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c8c:	d013      	beq.n	8000cb6 <LL_TIM_OC_DisableFast+0x52>
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c94:	d00d      	beq.n	8000cb2 <LL_TIM_OC_DisableFast+0x4e>
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c9c:	d007      	beq.n	8000cae <LL_TIM_OC_DisableFast+0x4a>
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ca4:	d101      	bne.n	8000caa <LL_TIM_OC_DisableFast+0x46>
 8000ca6:	2307      	movs	r3, #7
 8000ca8:	e00e      	b.n	8000cc8 <LL_TIM_OC_DisableFast+0x64>
 8000caa:	2308      	movs	r3, #8
 8000cac:	e00c      	b.n	8000cc8 <LL_TIM_OC_DisableFast+0x64>
 8000cae:	2306      	movs	r3, #6
 8000cb0:	e00a      	b.n	8000cc8 <LL_TIM_OC_DisableFast+0x64>
 8000cb2:	2305      	movs	r3, #5
 8000cb4:	e008      	b.n	8000cc8 <LL_TIM_OC_DisableFast+0x64>
 8000cb6:	2304      	movs	r3, #4
 8000cb8:	e006      	b.n	8000cc8 <LL_TIM_OC_DisableFast+0x64>
 8000cba:	2303      	movs	r3, #3
 8000cbc:	e004      	b.n	8000cc8 <LL_TIM_OC_DisableFast+0x64>
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	e002      	b.n	8000cc8 <LL_TIM_OC_DisableFast+0x64>
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e000      	b.n	8000cc8 <LL_TIM_OC_DisableFast+0x64>
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	3318      	adds	r3, #24
 8000cce:	4619      	mov	r1, r3
 8000cd0:	7bfb      	ldrb	r3, [r7, #15]
 8000cd2:	4a0b      	ldr	r2, [pc, #44]	; (8000d00 <LL_TIM_OC_DisableFast+0x9c>)
 8000cd4:	5cd3      	ldrb	r3, [r2, r3]
 8000cd6:	440b      	add	r3, r1
 8000cd8:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
 8000ce0:	4908      	ldr	r1, [pc, #32]	; (8000d04 <LL_TIM_OC_DisableFast+0xa0>)
 8000ce2:	5ccb      	ldrb	r3, [r1, r3]
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	2304      	movs	r3, #4
 8000ce8:	408b      	lsls	r3, r1
 8000cea:	43db      	mvns	r3, r3
 8000cec:	401a      	ands	r2, r3
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	601a      	str	r2, [r3, #0]
}
 8000cf2:	bf00      	nop
 8000cf4:	3714      	adds	r7, #20
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	08001b24 	.word	0x08001b24
 8000d04:	08001b30 	.word	0x08001b30

08000d08 <LL_TIM_SetClockSource>:
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8000d1a:	f023 0307 	bic.w	r3, r3, #7
 8000d1e:	683a      	ldr	r2, [r7, #0]
 8000d20:	431a      	orrs	r2, r3
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	609a      	str	r2, [r3, #8]
}
 8000d26:	bf00      	nop
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr

08000d32 <LL_TIM_SetTriggerOutput>:
{
 8000d32:	b480      	push	{r7}
 8000d34:	b083      	sub	sp, #12
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
 8000d3a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	431a      	orrs	r2, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	605a      	str	r2, [r3, #4]
}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <LL_TIM_DisableMasterSlaveMode>:
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b094      	sub	sp, #80	; 0x50
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000d7e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]
 8000d88:	609a      	str	r2, [r3, #8]
 8000d8a:	60da      	str	r2, [r3, #12]
 8000d8c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000d8e:	f107 031c 	add.w	r3, r7, #28
 8000d92:	2220      	movs	r2, #32
 8000d94:	2100      	movs	r1, #0
 8000d96:	4618      	mov	r0, r3
 8000d98:	f000 fe8a 	bl	8001ab0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	60da      	str	r2, [r3, #12]
 8000da8:	611a      	str	r2, [r3, #16]
 8000daa:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8000dac:	2001      	movs	r0, #1
 8000dae:	f7ff ff31 	bl	8000c14 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000db2:	f7ff fe8d 	bl	8000ad0 <__NVIC_GetPriorityGrouping>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2200      	movs	r2, #0
 8000dba:	2100      	movs	r1, #0
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff fedd 	bl	8000b7c <NVIC_EncodePriority>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	201c      	movs	r0, #28
 8000dc8:	f7ff feae 	bl	8000b28 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8000dcc:	201c      	movs	r0, #28
 8000dce:	f7ff fe8d 	bl	8000aec <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 7999;
 8000dd2:	f641 733f 	movw	r3, #7999	; 0x1f3f
 8000dd6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 9;
 8000ddc:	2309      	movs	r3, #9
 8000dde:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000de0:	2300      	movs	r3, #0
 8000de2:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000de4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000de8:	4619      	mov	r1, r3
 8000dea:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000dee:	f000 fa73 	bl	80012d8 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8000df2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000df6:	f7ff ff25 	bl	8000c44 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e00:	f7ff ff82 	bl	8000d08 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 8000e04:	2300      	movs	r3, #0
 8000e06:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000e14:	2300      	movs	r3, #0
 8000e16:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000e18:	f107 031c 	add.w	r3, r7, #28
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	2101      	movs	r1, #1
 8000e20:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e24:	f000 faca 	bl	80013bc <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8000e28:	2101      	movs	r1, #1
 8000e2a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e2e:	f7ff ff19 	bl	8000c64 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8000e32:	2100      	movs	r1, #0
 8000e34:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e38:	f7ff ff7b 	bl	8000d32 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8000e3c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e40:	f7ff ff8a 	bl	8000d58 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000e44:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000e48:	f7ff fecc 	bl	8000be4 <LL_AHB1_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000e4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e50:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000e52:	2302      	movs	r3, #2
 8000e54:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000e62:	2301      	movs	r3, #1
 8000e64:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e66:	1d3b      	adds	r3, r7, #4
 8000e68:	4619      	mov	r1, r3
 8000e6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e6e:	f000 f933 	bl	80010d8 <LL_GPIO_Init>

}
 8000e72:	bf00      	nop
 8000e74:	3750      	adds	r7, #80	; 0x50
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eb4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e80:	480d      	ldr	r0, [pc, #52]	; (8000eb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e82:	490e      	ldr	r1, [pc, #56]	; (8000ebc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e84:	4a0e      	ldr	r2, [pc, #56]	; (8000ec0 <LoopForever+0xe>)
  movs r3, #0
 8000e86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e88:	e002      	b.n	8000e90 <LoopCopyDataInit>

08000e8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e8e:	3304      	adds	r3, #4

08000e90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e94:	d3f9      	bcc.n	8000e8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e96:	4a0b      	ldr	r2, [pc, #44]	; (8000ec4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e98:	4c0b      	ldr	r4, [pc, #44]	; (8000ec8 <LoopForever+0x16>)
  movs r3, #0
 8000e9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e9c:	e001      	b.n	8000ea2 <LoopFillZerobss>

08000e9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea0:	3204      	adds	r2, #4

08000ea2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ea2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea4:	d3fb      	bcc.n	8000e9e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ea6:	f7ff fe01 	bl	8000aac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eaa:	f000 fddd 	bl	8001a68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000eae:	f7ff fbd3 	bl	8000658 <main>

08000eb2 <LoopForever>:

LoopForever:
    b LoopForever
 8000eb2:	e7fe      	b.n	8000eb2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000eb4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000eb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ebc:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000ec0:	08001b44 	.word	0x08001b44
  ldr r2, =_sbss
 8000ec4:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000ec8:	20000050 	.word	0x20000050

08000ecc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ecc:	e7fe      	b.n	8000ecc <ADC1_2_IRQHandler>

08000ece <LL_GPIO_SetPinMode>:
{
 8000ece:	b480      	push	{r7}
 8000ed0:	b089      	sub	sp, #36	; 0x24
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	60f8      	str	r0, [r7, #12]
 8000ed6:	60b9      	str	r1, [r7, #8]
 8000ed8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	fa93 f3a3 	rbit	r3, r3
 8000ee8:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	fab3 f383 	clz	r3, r3
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	2103      	movs	r1, #3
 8000ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8000efa:	43db      	mvns	r3, r3
 8000efc:	401a      	ands	r2, r3
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	fa93 f3a3 	rbit	r3, r3
 8000f08:	61bb      	str	r3, [r7, #24]
  return result;
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	fab3 f383 	clz	r3, r3
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	6879      	ldr	r1, [r7, #4]
 8000f16:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1a:	431a      	orrs	r2, r3
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	601a      	str	r2, [r3, #0]
}
 8000f20:	bf00      	nop
 8000f22:	3724      	adds	r7, #36	; 0x24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <LL_GPIO_SetPinOutputType>:
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	685a      	ldr	r2, [r3, #4]
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	401a      	ands	r2, r3
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	6879      	ldr	r1, [r7, #4]
 8000f46:	fb01 f303 	mul.w	r3, r1, r3
 8000f4a:	431a      	orrs	r2, r3
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	605a      	str	r2, [r3, #4]
}
 8000f50:	bf00      	nop
 8000f52:	3714      	adds	r7, #20
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <LL_GPIO_SetPinSpeed>:
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b089      	sub	sp, #36	; 0x24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	689a      	ldr	r2, [r3, #8]
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	fa93 f3a3 	rbit	r3, r3
 8000f76:	613b      	str	r3, [r7, #16]
  return result;
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	fab3 f383 	clz	r3, r3
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	2103      	movs	r1, #3
 8000f84:	fa01 f303 	lsl.w	r3, r1, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	401a      	ands	r2, r3
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	fa93 f3a3 	rbit	r3, r3
 8000f96:	61bb      	str	r3, [r7, #24]
  return result;
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	fab3 f383 	clz	r3, r3
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa8:	431a      	orrs	r2, r3
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	609a      	str	r2, [r3, #8]
}
 8000fae:	bf00      	nop
 8000fb0:	3724      	adds	r7, #36	; 0x24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <LL_GPIO_SetPinPull>:
{
 8000fba:	b480      	push	{r7}
 8000fbc:	b089      	sub	sp, #36	; 0x24
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	60f8      	str	r0, [r7, #12]
 8000fc2:	60b9      	str	r1, [r7, #8]
 8000fc4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	68da      	ldr	r2, [r3, #12]
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	fa93 f3a3 	rbit	r3, r3
 8000fd4:	613b      	str	r3, [r7, #16]
  return result;
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	fab3 f383 	clz	r3, r3
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	2103      	movs	r1, #3
 8000fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	401a      	ands	r2, r3
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	fa93 f3a3 	rbit	r3, r3
 8000ff4:	61bb      	str	r3, [r7, #24]
  return result;
 8000ff6:	69bb      	ldr	r3, [r7, #24]
 8000ff8:	fab3 f383 	clz	r3, r3
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	6879      	ldr	r1, [r7, #4]
 8001002:	fa01 f303 	lsl.w	r3, r1, r3
 8001006:	431a      	orrs	r2, r3
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	60da      	str	r2, [r3, #12]
}
 800100c:	bf00      	nop
 800100e:	3724      	adds	r7, #36	; 0x24
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <LL_GPIO_SetAFPin_0_7>:
{
 8001018:	b480      	push	{r7}
 800101a:	b089      	sub	sp, #36	; 0x24
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	6a1a      	ldr	r2, [r3, #32]
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	fa93 f3a3 	rbit	r3, r3
 8001032:	613b      	str	r3, [r7, #16]
  return result;
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	fab3 f383 	clz	r3, r3
 800103a:	b2db      	uxtb	r3, r3
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	210f      	movs	r1, #15
 8001040:	fa01 f303 	lsl.w	r3, r1, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	401a      	ands	r2, r3
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	fa93 f3a3 	rbit	r3, r3
 8001052:	61bb      	str	r3, [r7, #24]
  return result;
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	fab3 f383 	clz	r3, r3
 800105a:	b2db      	uxtb	r3, r3
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	6879      	ldr	r1, [r7, #4]
 8001060:	fa01 f303 	lsl.w	r3, r1, r3
 8001064:	431a      	orrs	r2, r3
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	621a      	str	r2, [r3, #32]
}
 800106a:	bf00      	nop
 800106c:	3724      	adds	r7, #36	; 0x24
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <LL_GPIO_SetAFPin_8_15>:
{
 8001076:	b480      	push	{r7}
 8001078:	b089      	sub	sp, #36	; 0x24
 800107a:	af00      	add	r7, sp, #0
 800107c:	60f8      	str	r0, [r7, #12]
 800107e:	60b9      	str	r1, [r7, #8]
 8001080:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	0a1b      	lsrs	r3, r3, #8
 800108a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	fa93 f3a3 	rbit	r3, r3
 8001092:	613b      	str	r3, [r7, #16]
  return result;
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	fab3 f383 	clz	r3, r3
 800109a:	b2db      	uxtb	r3, r3
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	210f      	movs	r1, #15
 80010a0:	fa01 f303 	lsl.w	r3, r1, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	401a      	ands	r2, r3
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	0a1b      	lsrs	r3, r3, #8
 80010ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	fa93 f3a3 	rbit	r3, r3
 80010b4:	61bb      	str	r3, [r7, #24]
  return result;
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	fab3 f383 	clz	r3, r3
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	6879      	ldr	r1, [r7, #4]
 80010c2:	fa01 f303 	lsl.w	r3, r1, r3
 80010c6:	431a      	orrs	r2, r3
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	625a      	str	r2, [r3, #36]	; 0x24
}
 80010cc:	bf00      	nop
 80010ce:	3724      	adds	r7, #36	; 0x24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b088      	sub	sp, #32
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	fa93 f3a3 	rbit	r3, r3
 80010ee:	613b      	str	r3, [r7, #16]
  return result;
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	fab3 f383 	clz	r3, r3
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80010fa:	e051      	b.n	80011a0 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	2101      	movs	r1, #1
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	fa01 f303 	lsl.w	r3, r1, r3
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d043      	beq.n	800119a <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d003      	beq.n	8001122 <LL_GPIO_Init+0x4a>
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	2b02      	cmp	r3, #2
 8001120:	d10e      	bne.n	8001140 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	461a      	mov	r2, r3
 8001128:	69b9      	ldr	r1, [r7, #24]
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff ff16 	bl	8000f5c <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	6819      	ldr	r1, [r3, #0]
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	461a      	mov	r2, r3
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff fef6 	bl	8000f2c <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	691b      	ldr	r3, [r3, #16]
 8001144:	461a      	mov	r2, r3
 8001146:	69b9      	ldr	r1, [r7, #24]
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff ff36 	bl	8000fba <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	2b02      	cmp	r3, #2
 8001154:	d11a      	bne.n	800118c <LL_GPIO_Init+0xb4>
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	fa93 f3a3 	rbit	r3, r3
 8001160:	60bb      	str	r3, [r7, #8]
  return result;
 8001162:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001164:	fab3 f383 	clz	r3, r3
 8001168:	b2db      	uxtb	r3, r3
 800116a:	2b07      	cmp	r3, #7
 800116c:	d807      	bhi.n	800117e <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	695b      	ldr	r3, [r3, #20]
 8001172:	461a      	mov	r2, r3
 8001174:	69b9      	ldr	r1, [r7, #24]
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff ff4e 	bl	8001018 <LL_GPIO_SetAFPin_0_7>
 800117c:	e006      	b.n	800118c <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	461a      	mov	r2, r3
 8001184:	69b9      	ldr	r1, [r7, #24]
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff ff75 	bl	8001076 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	461a      	mov	r2, r3
 8001192:	69b9      	ldr	r1, [r7, #24]
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f7ff fe9a 	bl	8000ece <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	3301      	adds	r3, #1
 800119e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	fa22 f303 	lsr.w	r3, r2, r3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1a6      	bne.n	80010fc <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 80011ae:	2300      	movs	r3, #0
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3720      	adds	r7, #32
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <LL_TIM_SetPrescaler>:
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	683a      	ldr	r2, [r7, #0]
 80011c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <LL_TIM_SetAutoReload>:
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	683a      	ldr	r2, [r7, #0]
 80011e2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <LL_TIM_SetRepetitionCounter>:
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	683a      	ldr	r2, [r7, #0]
 80011fe:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <LL_TIM_OC_SetCompareCH1>:
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	683a      	ldr	r2, [r7, #0]
 800121a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <LL_TIM_OC_SetCompareCH2>:
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	683a      	ldr	r2, [r7, #0]
 8001236:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <LL_TIM_OC_SetCompareCH3>:
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	683a      	ldr	r2, [r7, #0]
 8001252:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <LL_TIM_OC_SetCompareCH4>:
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	683a      	ldr	r2, [r7, #0]
 800126e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <LL_TIM_OC_SetCompareCH5>:
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	683a      	ldr	r2, [r7, #0]
 800128e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <LL_TIM_OC_SetCompareCH6>:
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	683a      	ldr	r2, [r7, #0]
 80012aa:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	695b      	ldr	r3, [r3, #20]
 80012c4:	f043 0201 	orr.w	r2, r3, #1
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	615a      	str	r2, [r3, #20]
}
 80012cc:	bf00      	nop
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a2f      	ldr	r2, [pc, #188]	; (80013a8 <LL_TIM_Init+0xd0>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d007      	beq.n	8001300 <LL_TIM_Init+0x28>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012f6:	d003      	beq.n	8001300 <LL_TIM_Init+0x28>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a2c      	ldr	r2, [pc, #176]	; (80013ac <LL_TIM_Init+0xd4>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d106      	bne.n	800130e <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	4313      	orrs	r3, r2
 800130c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a25      	ldr	r2, [pc, #148]	; (80013a8 <LL_TIM_Init+0xd0>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d013      	beq.n	800133e <LL_TIM_Init+0x66>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800131c:	d00f      	beq.n	800133e <LL_TIM_Init+0x66>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a22      	ldr	r2, [pc, #136]	; (80013ac <LL_TIM_Init+0xd4>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d00b      	beq.n	800133e <LL_TIM_Init+0x66>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a21      	ldr	r2, [pc, #132]	; (80013b0 <LL_TIM_Init+0xd8>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d007      	beq.n	800133e <LL_TIM_Init+0x66>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a20      	ldr	r2, [pc, #128]	; (80013b4 <LL_TIM_Init+0xdc>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d003      	beq.n	800133e <LL_TIM_Init+0x66>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a1f      	ldr	r2, [pc, #124]	; (80013b8 <LL_TIM_Init+0xe0>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d106      	bne.n	800134c <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	4313      	orrs	r3, r2
 800134a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68fa      	ldr	r2, [r7, #12]
 8001350:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	4619      	mov	r1, r3
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff ff3b 	bl	80011d4 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	881b      	ldrh	r3, [r3, #0]
 8001362:	4619      	mov	r1, r3
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7ff ff27 	bl	80011b8 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a0e      	ldr	r2, [pc, #56]	; (80013a8 <LL_TIM_Init+0xd0>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d00b      	beq.n	800138a <LL_TIM_Init+0xb2>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a0e      	ldr	r2, [pc, #56]	; (80013b0 <LL_TIM_Init+0xd8>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d007      	beq.n	800138a <LL_TIM_Init+0xb2>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a0d      	ldr	r2, [pc, #52]	; (80013b4 <LL_TIM_Init+0xdc>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d003      	beq.n	800138a <LL_TIM_Init+0xb2>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a0c      	ldr	r2, [pc, #48]	; (80013b8 <LL_TIM_Init+0xe0>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d105      	bne.n	8001396 <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	691b      	ldr	r3, [r3, #16]
 800138e:	4619      	mov	r1, r3
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f7ff ff2d 	bl	80011f0 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff ff8e 	bl	80012b8 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40012c00 	.word	0x40012c00
 80013ac:	40000400 	.word	0x40000400
 80013b0:	40014000 	.word	0x40014000
 80013b4:	40014400 	.word	0x40014400
 80013b8:	40014800 	.word	0x40014800

080013bc <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80013d2:	d045      	beq.n	8001460 <LL_TIM_OC_Init+0xa4>
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80013da:	d848      	bhi.n	800146e <LL_TIM_OC_Init+0xb2>
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013e2:	d036      	beq.n	8001452 <LL_TIM_OC_Init+0x96>
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013ea:	d840      	bhi.n	800146e <LL_TIM_OC_Init+0xb2>
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013f2:	d027      	beq.n	8001444 <LL_TIM_OC_Init+0x88>
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013fa:	d838      	bhi.n	800146e <LL_TIM_OC_Init+0xb2>
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001402:	d018      	beq.n	8001436 <LL_TIM_OC_Init+0x7a>
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800140a:	d830      	bhi.n	800146e <LL_TIM_OC_Init+0xb2>
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d003      	beq.n	800141a <LL_TIM_OC_Init+0x5e>
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	2b10      	cmp	r3, #16
 8001416:	d007      	beq.n	8001428 <LL_TIM_OC_Init+0x6c>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 8001418:	e029      	b.n	800146e <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800141a:	6879      	ldr	r1, [r7, #4]
 800141c:	68f8      	ldr	r0, [r7, #12]
 800141e:	f000 f82d 	bl	800147c <OC1Config>
 8001422:	4603      	mov	r3, r0
 8001424:	75fb      	strb	r3, [r7, #23]
      break;
 8001426:	e023      	b.n	8001470 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8001428:	6879      	ldr	r1, [r7, #4]
 800142a:	68f8      	ldr	r0, [r7, #12]
 800142c:	f000 f8a0 	bl	8001570 <OC2Config>
 8001430:	4603      	mov	r3, r0
 8001432:	75fb      	strb	r3, [r7, #23]
      break;
 8001434:	e01c      	b.n	8001470 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8001436:	6879      	ldr	r1, [r7, #4]
 8001438:	68f8      	ldr	r0, [r7, #12]
 800143a:	f000 f917 	bl	800166c <OC3Config>
 800143e:	4603      	mov	r3, r0
 8001440:	75fb      	strb	r3, [r7, #23]
      break;
 8001442:	e015      	b.n	8001470 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8001444:	6879      	ldr	r1, [r7, #4]
 8001446:	68f8      	ldr	r0, [r7, #12]
 8001448:	f000 f98e 	bl	8001768 <OC4Config>
 800144c:	4603      	mov	r3, r0
 800144e:	75fb      	strb	r3, [r7, #23]
      break;
 8001450:	e00e      	b.n	8001470 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8001452:	6879      	ldr	r1, [r7, #4]
 8001454:	68f8      	ldr	r0, [r7, #12]
 8001456:	f000 f9ed 	bl	8001834 <OC5Config>
 800145a:	4603      	mov	r3, r0
 800145c:	75fb      	strb	r3, [r7, #23]
      break;
 800145e:	e007      	b.n	8001470 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8001460:	6879      	ldr	r1, [r7, #4]
 8001462:	68f8      	ldr	r0, [r7, #12]
 8001464:	f000 fa44 	bl	80018f0 <OC6Config>
 8001468:	4603      	mov	r3, r0
 800146a:	75fb      	strb	r3, [r7, #23]
      break;
 800146c:	e000      	b.n	8001470 <LL_TIM_OC_Init+0xb4>
      break;
 800146e:	bf00      	nop
  }

  return result;
 8001470:	7dfb      	ldrb	r3, [r7, #23]
}
 8001472:	4618      	mov	r0, r3
 8001474:	3718      	adds	r7, #24
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
	...

0800147c <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a1b      	ldr	r3, [r3, #32]
 800148a:	f023 0201 	bic.w	r2, r3, #1
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a1b      	ldr	r3, [r3, #32]
 8001496:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	699b      	ldr	r3, [r3, #24]
 80014a2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f023 0303 	bic.w	r3, r3, #3
 80014aa:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014b6:	683a      	ldr	r2, [r7, #0]
 80014b8:	6812      	ldr	r2, [r2, #0]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	f023 0202 	bic.w	r2, r3, #2
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	691b      	ldr	r3, [r3, #16]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	f023 0201 	bic.w	r2, r3, #1
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a20      	ldr	r2, [pc, #128]	; (8001560 <OC1Config+0xe4>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d00b      	beq.n	80014fa <OC1Config+0x7e>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a1f      	ldr	r2, [pc, #124]	; (8001564 <OC1Config+0xe8>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d007      	beq.n	80014fa <OC1Config+0x7e>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a1e      	ldr	r2, [pc, #120]	; (8001568 <OC1Config+0xec>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d003      	beq.n	80014fa <OC1Config+0x7e>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a1d      	ldr	r2, [pc, #116]	; (800156c <OC1Config+0xf0>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d11e      	bne.n	8001538 <OC1Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	f023 0208 	bic.w	r2, r3, #8
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	695b      	ldr	r3, [r3, #20]
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	4313      	orrs	r3, r2
 8001508:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	f023 0204 	bic.w	r2, r3, #4
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	4313      	orrs	r3, r2
 8001518:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	4313      	orrs	r3, r2
 8001526:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	4313      	orrs	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	68fa      	ldr	r2, [r7, #12]
 8001542:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	4619      	mov	r1, r3
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f7ff fe5e 	bl	800120c <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	697a      	ldr	r2, [r7, #20]
 8001554:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001556:	2300      	movs	r3, #0
}
 8001558:	4618      	mov	r0, r3
 800155a:	3718      	adds	r7, #24
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40012c00 	.word	0x40012c00
 8001564:	40014000 	.word	0x40014000
 8001568:	40014400 	.word	0x40014400
 800156c:	40014800 	.word	0x40014800

08001570 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a1b      	ldr	r3, [r3, #32]
 800157e:	f023 0210 	bic.w	r2, r3, #16
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a1b      	ldr	r3, [r3, #32]
 800158a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800159e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	6812      	ldr	r2, [r2, #0]
 80015ae:	0212      	lsls	r2, r2, #8
 80015b0:	4313      	orrs	r3, r2
 80015b2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	f023 0220 	bic.w	r2, r3, #32
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	691b      	ldr	r3, [r3, #16]
 80015be:	011b      	lsls	r3, r3, #4
 80015c0:	4313      	orrs	r3, r2
 80015c2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	f023 0210 	bic.w	r2, r3, #16
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	011b      	lsls	r3, r3, #4
 80015d0:	4313      	orrs	r3, r2
 80015d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4a21      	ldr	r2, [pc, #132]	; (800165c <OC2Config+0xec>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d00b      	beq.n	80015f4 <OC2Config+0x84>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4a20      	ldr	r2, [pc, #128]	; (8001660 <OC2Config+0xf0>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d007      	beq.n	80015f4 <OC2Config+0x84>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4a1f      	ldr	r2, [pc, #124]	; (8001664 <OC2Config+0xf4>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d003      	beq.n	80015f4 <OC2Config+0x84>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a1e      	ldr	r2, [pc, #120]	; (8001668 <OC2Config+0xf8>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d11f      	bne.n	8001634 <OC2Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	695b      	ldr	r3, [r3, #20]
 80015fe:	019b      	lsls	r3, r3, #6
 8001600:	4313      	orrs	r3, r2
 8001602:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	019b      	lsls	r3, r3, #6
 8001610:	4313      	orrs	r3, r2
 8001612:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	4313      	orrs	r3, r2
 8001622:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	69db      	ldr	r3, [r3, #28]
 800162e:	00db      	lsls	r3, r3, #3
 8001630:	4313      	orrs	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	68fa      	ldr	r2, [r7, #12]
 800163e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	4619      	mov	r1, r3
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f7ff fdee 	bl	8001228 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	697a      	ldr	r2, [r7, #20]
 8001650:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001652:	2300      	movs	r3, #0
}
 8001654:	4618      	mov	r0, r3
 8001656:	3718      	adds	r7, #24
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40012c00 	.word	0x40012c00
 8001660:	40014000 	.word	0x40014000
 8001664:	40014400 	.word	0x40014400
 8001668:	40014800 	.word	0x40014800

0800166c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a1b      	ldr	r3, [r3, #32]
 800167a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a1b      	ldr	r3, [r3, #32]
 8001686:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f023 0303 	bic.w	r3, r3, #3
 800169a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016a6:	683a      	ldr	r2, [r7, #0]
 80016a8:	6812      	ldr	r2, [r2, #0]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	691b      	ldr	r3, [r3, #16]
 80016b8:	021b      	lsls	r3, r3, #8
 80016ba:	4313      	orrs	r3, r2
 80016bc:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	021b      	lsls	r3, r3, #8
 80016ca:	4313      	orrs	r3, r2
 80016cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a21      	ldr	r2, [pc, #132]	; (8001758 <OC3Config+0xec>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d00b      	beq.n	80016ee <OC3Config+0x82>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a20      	ldr	r2, [pc, #128]	; (800175c <OC3Config+0xf0>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d007      	beq.n	80016ee <OC3Config+0x82>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a1f      	ldr	r2, [pc, #124]	; (8001760 <OC3Config+0xf4>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d003      	beq.n	80016ee <OC3Config+0x82>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a1e      	ldr	r2, [pc, #120]	; (8001764 <OC3Config+0xf8>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d11f      	bne.n	800172e <OC3Config+0xc2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	695b      	ldr	r3, [r3, #20]
 80016f8:	029b      	lsls	r3, r3, #10
 80016fa:	4313      	orrs	r3, r2
 80016fc:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	029b      	lsls	r3, r3, #10
 800170a:	4313      	orrs	r3, r2
 800170c:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	011b      	lsls	r3, r3, #4
 800171a:	4313      	orrs	r3, r2
 800171c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	69db      	ldr	r3, [r3, #28]
 8001728:	015b      	lsls	r3, r3, #5
 800172a:	4313      	orrs	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	4619      	mov	r1, r3
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7ff fd7f 	bl	8001244 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	697a      	ldr	r2, [r7, #20]
 800174a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3718      	adds	r7, #24
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40012c00 	.word	0x40012c00
 800175c:	40014000 	.word	0x40014000
 8001760:	40014400 	.word	0x40014400
 8001764:	40014800 	.word	0x40014800

08001768 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a1b      	ldr	r3, [r3, #32]
 8001776:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a1b      	ldr	r3, [r3, #32]
 8001782:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	69db      	ldr	r3, [r3, #28]
 800178e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001796:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800179e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80017a2:	683a      	ldr	r2, [r7, #0]
 80017a4:	6812      	ldr	r2, [r2, #0]
 80017a6:	0212      	lsls	r2, r2, #8
 80017a8:	4313      	orrs	r3, r2
 80017aa:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	031b      	lsls	r3, r3, #12
 80017b8:	4313      	orrs	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	031b      	lsls	r3, r3, #12
 80017c8:	4313      	orrs	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	4a15      	ldr	r2, [pc, #84]	; (8001824 <OC4Config+0xbc>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d00b      	beq.n	80017ec <OC4Config+0x84>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4a14      	ldr	r2, [pc, #80]	; (8001828 <OC4Config+0xc0>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d007      	beq.n	80017ec <OC4Config+0x84>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4a13      	ldr	r2, [pc, #76]	; (800182c <OC4Config+0xc4>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d003      	beq.n	80017ec <OC4Config+0x84>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4a12      	ldr	r2, [pc, #72]	; (8001830 <OC4Config+0xc8>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d107      	bne.n	80017fc <OC4Config+0x94>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	699b      	ldr	r3, [r3, #24]
 80017f6:	019b      	lsls	r3, r3, #6
 80017f8:	4313      	orrs	r3, r2
 80017fa:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	697a      	ldr	r2, [r7, #20]
 8001800:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68fa      	ldr	r2, [r7, #12]
 8001806:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	4619      	mov	r1, r3
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7ff fd26 	bl	8001260 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800181a:	2300      	movs	r3, #0
}
 800181c:	4618      	mov	r0, r3
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40012c00 	.word	0x40012c00
 8001828:	40014000 	.word	0x40014000
 800182c:	40014400 	.word	0x40014400
 8001830:	40014800 	.word	0x40014800

08001834 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a1b      	ldr	r3, [r3, #32]
 8001842:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a1b      	ldr	r3, [r3, #32]
 800184e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001854:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800185c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	6812      	ldr	r2, [r2, #0]
 8001864:	4313      	orrs	r3, r2
 8001866:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	691b      	ldr	r3, [r3, #16]
 8001872:	041b      	lsls	r3, r3, #16
 8001874:	4313      	orrs	r3, r2
 8001876:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	041b      	lsls	r3, r3, #16
 8001884:	4313      	orrs	r3, r2
 8001886:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a15      	ldr	r2, [pc, #84]	; (80018e0 <OC5Config+0xac>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d00b      	beq.n	80018a8 <OC5Config+0x74>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a14      	ldr	r2, [pc, #80]	; (80018e4 <OC5Config+0xb0>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d007      	beq.n	80018a8 <OC5Config+0x74>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a13      	ldr	r2, [pc, #76]	; (80018e8 <OC5Config+0xb4>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d003      	beq.n	80018a8 <OC5Config+0x74>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a12      	ldr	r2, [pc, #72]	; (80018ec <OC5Config+0xb8>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d109      	bne.n	80018bc <OC5Config+0x88>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	021b      	lsls	r3, r3, #8
 80018b6:	431a      	orrs	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	68ba      	ldr	r2, [r7, #8]
 80018c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	4619      	mov	r1, r3
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f7ff fcd7 	bl	800127c <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68fa      	ldr	r2, [r7, #12]
 80018d2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40012c00 	.word	0x40012c00
 80018e4:	40014000 	.word	0x40014000
 80018e8:	40014400 	.word	0x40014400
 80018ec:	40014800 	.word	0x40014800

080018f0 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a1b      	ldr	r3, [r3, #32]
 80018fe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a1b      	ldr	r3, [r3, #32]
 800190a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001910:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001918:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800191c:	683a      	ldr	r2, [r7, #0]
 800191e:	6812      	ldr	r2, [r2, #0]
 8001920:	0212      	lsls	r2, r2, #8
 8001922:	4313      	orrs	r3, r2
 8001924:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	691b      	ldr	r3, [r3, #16]
 8001930:	051b      	lsls	r3, r3, #20
 8001932:	4313      	orrs	r3, r2
 8001934:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	051b      	lsls	r3, r3, #20
 8001942:	4313      	orrs	r3, r2
 8001944:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a14      	ldr	r2, [pc, #80]	; (800199c <OC6Config+0xac>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d00b      	beq.n	8001966 <OC6Config+0x76>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a13      	ldr	r2, [pc, #76]	; (80019a0 <OC6Config+0xb0>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d007      	beq.n	8001966 <OC6Config+0x76>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a12      	ldr	r2, [pc, #72]	; (80019a4 <OC6Config+0xb4>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d003      	beq.n	8001966 <OC6Config+0x76>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a11      	ldr	r2, [pc, #68]	; (80019a8 <OC6Config+0xb8>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d109      	bne.n	800197a <OC6Config+0x8a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	029b      	lsls	r3, r3, #10
 8001974:	431a      	orrs	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	68ba      	ldr	r2, [r7, #8]
 800197e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	4619      	mov	r1, r3
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f7ff fc88 	bl	800129c <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	68fa      	ldr	r2, [r7, #12]
 8001990:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40012c00 	.word	0x40012c00
 80019a0:	40014000 	.word	0x40014000
 80019a4:	40014400 	.word	0x40014400
 80019a8:	40014800 	.word	0x40014800

080019ac <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80019be:	4a07      	ldr	r2, [pc, #28]	; (80019dc <LL_InitTick+0x30>)
 80019c0:	3b01      	subs	r3, #1
 80019c2:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80019c4:	4b05      	ldr	r3, [pc, #20]	; (80019dc <LL_InitTick+0x30>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ca:	4b04      	ldr	r3, [pc, #16]	; (80019dc <LL_InitTick+0x30>)
 80019cc:	2205      	movs	r2, #5
 80019ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	e000e010 	.word	0xe000e010

080019e0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80019e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f7ff ffdd 	bl	80019ac <LL_InitTick>
}
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
	...

080019fc <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8001a04:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <LL_mDelay+0x48>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8001a0a:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a12:	d00c      	beq.n	8001a2e <LL_mDelay+0x32>
  {
    Delay++;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3301      	adds	r3, #1
 8001a18:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8001a1a:	e008      	b.n	8001a2e <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001a1c:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <LL_mDelay+0x48>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d002      	beq.n	8001a2e <LL_mDelay+0x32>
    {
      Delay--;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	607b      	str	r3, [r7, #4]
  while (Delay)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d1f3      	bne.n	8001a1c <LL_mDelay+0x20>
    }
  }
}
 8001a34:	bf00      	nop
 8001a36:	bf00      	nop
 8001a38:	3714      	adds	r7, #20
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	e000e010 	.word	0xe000e010

08001a48 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001a50:	4a04      	ldr	r2, [pc, #16]	; (8001a64 <LL_SetSystemCoreClock+0x1c>)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6013      	str	r3, [r2, #0]
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	20000020 	.word	0x20000020

08001a68 <__libc_init_array>:
 8001a68:	b570      	push	{r4, r5, r6, lr}
 8001a6a:	4d0d      	ldr	r5, [pc, #52]	; (8001aa0 <__libc_init_array+0x38>)
 8001a6c:	4c0d      	ldr	r4, [pc, #52]	; (8001aa4 <__libc_init_array+0x3c>)
 8001a6e:	1b64      	subs	r4, r4, r5
 8001a70:	10a4      	asrs	r4, r4, #2
 8001a72:	2600      	movs	r6, #0
 8001a74:	42a6      	cmp	r6, r4
 8001a76:	d109      	bne.n	8001a8c <__libc_init_array+0x24>
 8001a78:	4d0b      	ldr	r5, [pc, #44]	; (8001aa8 <__libc_init_array+0x40>)
 8001a7a:	4c0c      	ldr	r4, [pc, #48]	; (8001aac <__libc_init_array+0x44>)
 8001a7c:	f000 f820 	bl	8001ac0 <_init>
 8001a80:	1b64      	subs	r4, r4, r5
 8001a82:	10a4      	asrs	r4, r4, #2
 8001a84:	2600      	movs	r6, #0
 8001a86:	42a6      	cmp	r6, r4
 8001a88:	d105      	bne.n	8001a96 <__libc_init_array+0x2e>
 8001a8a:	bd70      	pop	{r4, r5, r6, pc}
 8001a8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a90:	4798      	blx	r3
 8001a92:	3601      	adds	r6, #1
 8001a94:	e7ee      	b.n	8001a74 <__libc_init_array+0xc>
 8001a96:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a9a:	4798      	blx	r3
 8001a9c:	3601      	adds	r6, #1
 8001a9e:	e7f2      	b.n	8001a86 <__libc_init_array+0x1e>
 8001aa0:	08001b3c 	.word	0x08001b3c
 8001aa4:	08001b3c 	.word	0x08001b3c
 8001aa8:	08001b3c 	.word	0x08001b3c
 8001aac:	08001b40 	.word	0x08001b40

08001ab0 <memset>:
 8001ab0:	4402      	add	r2, r0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d100      	bne.n	8001aba <memset+0xa>
 8001ab8:	4770      	bx	lr
 8001aba:	f803 1b01 	strb.w	r1, [r3], #1
 8001abe:	e7f9      	b.n	8001ab4 <memset+0x4>

08001ac0 <_init>:
 8001ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ac2:	bf00      	nop
 8001ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ac6:	bc08      	pop	{r3}
 8001ac8:	469e      	mov	lr, r3
 8001aca:	4770      	bx	lr

08001acc <_fini>:
 8001acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ace:	bf00      	nop
 8001ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ad2:	bc08      	pop	{r3}
 8001ad4:	469e      	mov	lr, r3
 8001ad6:	4770      	bx	lr
